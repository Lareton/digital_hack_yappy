import pickle
from sklearn.neighbors import KDTree
import numpy as np

class VectorDatabase:
    """
    Класс для управления векторной базой данных и поиска ближайших соседей с использованием KDTree.

    Описание:
    --------
    Этот класс предназначен для хранения и обработки векторов признаков видео и предоставляет методы
    для поиска ближайших соседей по евклидовой метрике с помощью структуры данных KDTree.

    Атрибуты:
    ---------
    full_index : list
        Полный индекс, загруженный из файла, представляющий собой список кортежей (идентификатор, вектор признаков).
    indexes : list
        Список идентификаторов видео из индекса.
    embs : list
        Список векторов признаков, преобразованных в одномерный массив.
    tree : KDTree
        Структура данных KDTree для быстрого поиска ближайших соседей по евклидовой метрике.

    Методы:
    -------
    __init__(self, path_to_index)
        Инициализирует объект `VectorDatabase` и загружает векторный индекс из файла.

    query(self, emb, k=5)
        Выполняет поиск ближайших соседей для заданного вектора признаков и возвращает список индексов и соответствующих векторов.
    """

    def __init__(self, path_to_index: str):
        """
        Инициализирует объект класса `VectorDatabase` и загружает векторный индекс из файла.

        Параметры:
        ----------
        path_to_index : str
            Путь к файлу с сериализованным индексом (формат .pkl), содержащим список кортежей (идентификатор, вектор).

        Описание:
        --------
        1. Загружает векторный индекс из файла и сохраняет его в атрибут `full_index`.
        2. Извлекает список идентификаторов (`indexes`) и векторов признаков (`embs`) из полного индекса.
        3. Преобразует все векторы в одномерные массивы и строит дерево KDTree для поиска ближайших соседей.
        """
        self.full_index = None
        with open(path_to_index, "rb") as f:
            self.full_index = pickle.load(f)

        # Извлечение идентификаторов и признаков из индекса
        self.indexes = [i[0] for i in self.full_index]
        self.embs = [i[1].reshape(-1) for i in self.full_index]

        # Построение дерева KDTree для поиска ближайших соседей
        self.tree = KDTree(np.array(self.embs), metric="euclidean")

    def query(self, emb: np.ndarray, k: int = 5) -> list:
        """
        Выполняет поиск ближайших соседей для заданного вектора признаков.

        Параметры:
        ----------
        emb : np.ndarray
            Вектор признаков, по которому выполняется поиск ближайших соседей.
        k : int, по умолчанию 5
            Количество ближайших соседей, которые нужно найти.

        Возвращает:
        ----------
        list : List[tuple]
            Список кортежей (индекс, вектор), представляющий ближайшие соседние векторы.
            - индекс: идентификатор ближайшего соседа в базе данных.
            - вектор: соответствующий вектор признаков из базы данных.

        Описание работы:
        ----------------
        1. Преобразует входной вектор признаков `emb` в одномерный массив.
        2. Выполняет поиск ближайших соседей с помощью KDTree.
        3. Извлекает идентификаторы и векторы ближайших соседей.
        4. Возвращает список ближайших соседей в виде кортежей (индекс, вектор).

        Пример использования:
        ---------------------
        >>> db = VectorDatabase("full_index2.pkl")
        >>> query_emb = np.array([0.1, 0.2, 0.3, 0.4])
        >>> db.query(query_emb, k=3)
        [(0, array([0.1, 0.2, 0.3, 0.4])), (1, array([0.2, 0.3, 0.4, 0.5])), ...]
        """
        # Преобразование вектора признаков в одномерный массив
        emb = emb.reshape(-1)

        # Поиск ближайших соседей
        dist, inds = self.tree.query([emb], k=k)

        # Извлечение ближайших соседей по индексам
        inds = list(inds[0])
        best_embs = [self.embs[i] for i in list(inds)]

        # Возвращение списка кортежей (индекс, вектор)
        return list(zip(inds, best_embs))
